# -*- coding: utf-8 -*-
"""
Created on Wed Feb 19 14:45:46 2025

@authors: Charith Sunku and Tomas Franco

Purpose: Implements a multi-task control system for the ROMI robot.
         This script has the following tasks:
             
             -User interaction task handles button presses and calibration.
             
             -IR Task that is responsible for interacting with the IR class to
              calibrate our IR sensor for best performance on the track.
             
             -Motor actuation task that is responsible for enabling and 
              disabling the motors.
             
             -Controller task that has a angle check for Diamond-mode, an 
             IMU-feedback based movement event using P control. It's also 
             responsible for using the centroid from IR_Array and using the
             total action from the controller class to change the motor PWMs. 
             
             -Dead reckoning task uses imu-based navigation and pre-programmed 
             movement lengths as encoder distances with a bump sensor override 
             to enable a second sequence of movements around the wall obstacle.
"""
# -------
# Imports
# -------
import pyb
import cotask
import task_share
import gc
from pyb import Pin, ExtInt
from motor import Motor #Import motor class to help command motor efforts
from encoder import Encoder  # Import the encoder task to get distance
from IR_sensor import IR_Array  # Import the IR_Sensor class
from controller import Controller # Import the Controller class
from bno055 import BNO055  # Import our IMU (Inertial Measurement Unit) class
from Bumpies import Bumpies # Import our bump sensor class

# ------------------------------------------------
# Hardware Initialization
# ------------------------------------------------

#Define IR sensor pins and additional control pins.
IR_Pin_list = ["C2", "C3", "A0", "A1", "A4", "B0", "C1", "C0", "A6", "A7", "C5", "B1", "C4"]
even_Pin = "B14"
odd_Pin = "B13"

# Instantiate the IR sensor array using the IR_Pin_list defined above.
IR = IR_Array(IR_Pin_list, even_Pin, odd_Pin)

# Create Right and Left Motor Objects
mot_R = Motor("A8", "H1", "H0", 1) # Right motor: PWM on A8, directions on H1 and H0
mot_L = Motor("A9", "B2", "A2", 2) # Left motor:  PWM on A9, directions on B2 and A2

# Create Right and Left Encoder Objects
encL = Encoder(2, "A15", "B3")
encR = Encoder(3, "B4", "B5")

# Global variable used to track the button state for user interaction.
button_state = 0

# Initialize the BNO055 IMU for dead reckoning task and controller task.
i2c = pyb.I2C(1)
reset_pin = pyb.Pin('B7', pyb.Pin.OUT_PP)
reset_pin.high()
pyb.delay(100)
i2c.init(pyb.I2C.CONTROLLER, baudrate=100000)
imu = BNO055(i2c, address=0x28)
pyb.delay(50)
MANUAL_CALIB_COEFFS = b'\xfb\xff\xf7\xff\xec\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xe8\x03\x00\x00'

# Create bump sensor instance with specified pins.
bumpies = Bumpies([Pin("PB12"), Pin("PB11"), Pin("PB6"), Pin("PC7"), Pin("PB10"), Pin("PB15")])

# ---------------------------------------------
# Shared Variables for inter-task communication
# ---------------------------------------------
romi_heading = task_share.Share('f', thread_protect=False, name="Heading Angle")
romi_heading.put(0)
system_done = task_share.Share('B', thread_protect=False, name="SystemDone")
system_done.put(0)
R_pwm_effort = task_share.Share('f', thread_protect=False, name="Right PWM Effort")
R_pwm_effort.put(0)
L_pwm_effort = task_share.Share('f', thread_protect=False, name="Left PWM Effort")
L_pwm_effort.put(0)
calibration = task_share.Share('h', thread_protect=False, name="Calibration Counter")
calibration.put(0)
centroid = task_share.Share('f', thread_protect=False, name="IR Centroid")
centroid.put(7)
dr_mode = task_share.Share('B', thread_protect=False, name="Dead Reckoning")
dr_mode.put(0)  # 0 is inactive, 1 is active mode

# =============================================================================
# User interaction task
# =============================================================================
def button_interrupt(line):
    """
    Interrupt handler for the User button press
    """
    global button_state
    if button_state:
        button_state = 0
    else:
        button_state = 1
        return
    return

def User_Interaction_Task(shares):
    """
    User Interaction FSM:
    Handles button-based calibration and system activation sequences.
    """
    global button_state
    system_done, calibration = shares
    state = 0
    while True:
        if system_done.get():
            state = 99
        if state == 0:
            # Set up the user button on PC13 (active low)
            attach_button_interrupt = ExtInt(Pin.cpu.C13, ExtInt.IRQ_FALLING, 
                                             Pin.PULL_NONE, button_interrupt)
            print("Calibrate Dark")
            state = 1
        elif state == 1:  
            # Wait for button press to calibrate dark sensor
            if button_state and calibration.get() == 0:
                print("Calibrate Light")
                calibration.put(1)
                button_state = 0
            elif button_state and calibration.get() == 1: 
                # Wait for button press to calibrate the light sensor
                print("Press USER Button to ACTIVATE ROMULUS")
                button_state = 0
                calibration.put(2)
                state = 2
        elif state == 2:
            #Wait for button press to begin running.
            if button_state:
                print("ROMULUS CONQUERS ALLLLLLLLL")
                button_state = 0
                calibration.put(3)
                state = 3
        elif state == 3:  
            # Wait for button to stop system
            if button_state and system_done.get() == 0:
                system_done.put(1)
                button_state = 0
                state = 4
        elif state == 4:
            pass
        yield 0

# =============================================================================
# Actuation Task
# =============================================================================
def Actuation_Task(shares):
    """
    Motor actuation task that is responsible for enabling and 
    disabling the motors.
    """
    system_done, R_pwm_effort, L_pwm_effort, calibration, dr_mode = shares
    state = 0
    while True:
        if state == 0:
            # Enable motors before actuating.
            mot_R.enable()
            mot_L.enable()
            state = 1
        elif state == 1:
            if system_done.get():
                # Stop and disable motors when system is marked done.
                mot_R.set_effort(0)
                mot_L.set_effort(0)
                mot_R.disable()
                mot_L.disable()
                state = 2
            elif calibration.get() == 3 and (dr_mode.get() == 0):
                # Regular operation: update motor effots and encoder readings.
                mot_R.set_effort(R_pwm_effort.get())
                encR.update()
                mot_L.set_effort(L_pwm_effort.get())
                encL.update()
            elif calibration.get() == 3 and (dr_mode.get() == 1):
                #In Dead reckoning mode, update the encoder readings to allow 
                #for tracking of encoder positions
                encR.update()
                encL.update()
        elif state == 2:
            pass
        yield 0

# =============================================================================
# IR Calibration Task
# =============================================================================
def IR_Task(shares):
    """
    IR Task that is responsible for interacting with the IR class to
    calibrate our IR sensor for best performance on the track.
    """
    system_done, calibration, centroid = shares
    state = 0
    while True:
        if system_done.get():
            state = 4
        if state == 0:
            IR.disable()
            state = 1
        elif state == 1:
            if calibration.get() == 1:
                print("Dark calibration:", IR.calibrateDark())
                state = 2
        elif state == 2:
            if calibration.get() == 2:
                print("Light calibration:", IR.calibrateLight())
                state = 3
        elif state == 3 and calibration.get() == 3:
            IR.updateIR()
            centroid.put(IR.getCentroid())
        elif state == 4:
            pass
        yield 0

# =============================================================================
# Controller Task (Line following and Diamond-mode IMU movement)
# =============================================================================
def Controller_Task(shares):
    """ 
    Controller task that has a angle check for Diamond-mode, an 
    IMU-feedback based movement event using P control. It's also 
    responsible for using the centroid from IR_Array and using the
    total action from the controller class to change the motor PWMs. 
    """
    V_Romulus = 28  # Base PWM value for line following.
    system_done, calibration, R_pwm_effort, L_pwm_effort, centroid, romi_heading = shares
    state = 0
    diamond_mode = False
    diamond_start = 0
    diamond = 0
    while True:
        if system_done.get():
            state = 3
        if state == 0:
            motor_controller = Controller(reference_value=7, KP=0.22, KI=0.08, KD=0, dt = 0.012)
            state = 1
        if state == 1:
            if calibration.get() == 3:
                state = 2
        elif state == 2:
# =============================================================================
#             # Check IMU heading; if near 90, trigger diamond mode.
# =============================================================================
            current_heading = imu.get_corrected_heading()
            romi_heading.put(current_heading)
            if (not diamond_mode) and (89 <= current_heading <= 92) and diamond != 2:
                print("Diamond mode triggered (heading near 90°).")
                #Line follow until heading is near 90 degrees and transition to "diamond mode" sub-state.
                diamond_mode = True
                diamond_start = encL.get_position()
                diamond = 1
# =============================================================================
#             # If in diamond mode, override with IMU-based control targeting 90.
# =============================================================================
            if diamond_mode:
                # IMU-based P control movement for 3.2 encoder lengths
                error = imu.compute_heading_error(90)
                kp = 1
                correction = kp * error
                # Apply correction: if error > 0, need to turn left; if error < 0, turn right.
                R_pwm_effort.put(V_Romulus + correction)
                L_pwm_effort.put(V_Romulus - correction)
                diamond_length = encL.get_position() - diamond_start
                # Diamond mode lasts for 1000 ms.
                if diamond_length >= 3.2:
                    print("Exiting diamond mode.")
                    diamond_mode = False
                    diamond = 2  # Indicate diamond maneuver complete.
            else:
# =============================================================================
#                 Normal line following.
# =============================================================================
                motor_controller.updateMeasured(centroid.get())
                effortR = V_Romulus + V_Romulus*motor_controller.totalAction()
                effortL = V_Romulus - V_Romulus*motor_controller.totalAction()
                R_pwm_effort.put(effortR)
                L_pwm_effort.put(effortL)
        elif state == 3:
            pass
        yield 0

# =============================================================================
# Dead Reckoning Task (for Zones 4 and 5)
# =============================================================================
def DeadReckoning_Task(shares):
    """
    Dead reckoning task:
    Executes imu-based navigation and pre-programmed 
    movement lengths as encoder distances with a bump sensor override 
    to enable a second sequence of movements around the wall obstacle.
    """
    #Initialize shares and variables used for speed of task
    
    system_done, calibration, dr_mode = shares
    state = 0  # Main DR state: 0 = waiting; 1 = rotation; 2 = straight drive; 10 = bump override; 99 = stop
    turning_pwm = 18
    fwd_pwm = 50
    heading_threshold = 4  # degrees tolerance

    # Calibrate sensor using manual coefficients if provided.
    if MANUAL_CALIB_COEFFS is not None:
        if len(MANUAL_CALIB_COEFFS) == 22:
            imu.set_calibration_coefficients(MANUAL_CALIB_COEFFS)
            print("Manual calibration coefficients applied.")
        else:
            print("Error: Calibration data must be 22 bytes long. Not applying manual calibration.")

    # Define route segments for dead reckoning pre bump.
    # Zone 4: Grid navigation (e.g. heading 180).
    # Zone 5: Wall segment with bump override (e.g. heading -90, marked with "bump").
    route_segments = [
        {"heading": -178, "move_encoder_rads": 18.5},
        {"heading": -90, "move_encoder_rads": 20, "bump": True}
    ]

    segment_index = 0

    # Variables for bump override sequence
    bump_state = 0
    bump_move_start = 0

    while True:
        if system_done.get():
            state = 99 #If button state is set enter idle state
            
# =============================================================================
#         Pre-bump Dead Reckoning task operation
# =============================================================================
        if state < 10:
            if state == 0:
                if calibration.get() == 3:
                    state = 1
                    imu.set_offset()  # Set the reference offset once
            elif state == 1:
                # Wait until encoder positions exceed thresholds to start DR,
                # measured through test runs and averaged
                if encR.get_position() > 96 and encL.get_position() > 106:
                    # Once encoders reach threshold, enter dead reckoning
                    # Move based on route segments.
                    print("DR Engaged: Encoder pos exceed chkpt4")
                    dr_mode.put(1)
                    state = 2
            elif state == 2:
                # Rotation state: rotate to the target heading.
                if segment_index < len(route_segments):
                    target_heading = route_segments[segment_index]["heading"]
                    error = imu.compute_heading_error(target_heading)
                    if abs(error) <= heading_threshold:
                        mot_R.set_effort(0)
                        mot_L.set_effort(0)
                        encL.update()
                        move_start_len = encL.get_position()
                        state = 3  # Proceed to straight drive state.
                    else:
                        if error < 0:  # Turn right.
                            mot_L.set_effort(turning_pwm)
                            mot_R.set_effort(-turning_pwm)
                        else:         # Turn left.
                            mot_L.set_effort(-turning_pwm)
                            mot_R.set_effort(turning_pwm)
                else:
                    state = 99  # All segments done enter idle state.
            elif state == 3:
                # Straight drive state: Uses heading correction from IMU
                move_encoder_rads = route_segments[segment_index]["move_encoder_rads"]
                target_heading = route_segments[segment_index]["heading"]
                error = imu.compute_heading_error(target_heading)
                kp = 4
                correction = kp * error
                mot_R.set_effort(fwd_pwm + correction)
                mot_L.set_effort(fwd_pwm - correction)
                
                # If this segment is marked with "bump", check the bump sensor.
                if "bump" in route_segments[segment_index] and route_segments[segment_index]["bump"]:
                    if bumpies.get_status():
                        print("Bump detected. Initiating bump override sequence.")
                        bumpies.reset_status()
                        mot_R.set_effort(0)
                        mot_L.set_effort(0)
                        state = 10  # Switch to bump override sequence.
                        bump_state = 1
                        bump_move_start = encL.get_position()
                        continue
                if abs(encL.get_position() - move_start_len) >= move_encoder_rads:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    segment_index += 1
                    state = 1  # Transition to rotation for the next segment.
            elif state == 99:
                mot_R.set_effort(0)
                mot_L.set_effort(0)
# =============================================================================
#          --- Bump Override Sequence (Zone 5) ---
# =============================================================================
        elif state == 10:
            # Bump sequence sub-states:
            # 1: Reverse (drive backwards) for 0.5 encoder radians
            # 2: Rotate to heading 0°.
            # 3: Drive forward for 11 encoder radians.
            # 4: Rotate to heading -90°.
            # 5: Drive forward for 5.5 encoder radians.
            # 6: Rotate to heading 180°.
            # 7: Drive forward for 12 encoder radians.
            # 8: End bump sequence (stop motors).
            if bump_state == 1:
                # Drive in reverse for 0.5 encoder radians
                mot_R.set_effort(-fwd_pwm)
                mot_L.set_effort(-fwd_pwm)
                if abs(encL.get_position() - bump_move_start) >= 0.5:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 2
            elif bump_state == 2:
                # Rotate to heading 0°.
                target_heading = 0
                error = imu.compute_heading_error(target_heading)
                if abs(error) <= heading_threshold:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_move_start = encL.get_position()
                    bump_state = 3
                else:
                    if error < 0:
                        mot_L.set_effort(turning_pwm)
                        mot_R.set_effort(-turning_pwm)
                    else:
                        mot_L.set_effort(-turning_pwm)
                        mot_R.set_effort(turning_pwm)
            elif bump_state == 3:
                # Drive forward for 11 Left Encoder radians at heading 0°
                target_heading = 0
                error = imu.compute_heading_error(target_heading)
                correction = kp * error
                mot_R.set_effort(fwd_pwm + correction)
                mot_L.set_effort(fwd_pwm - correction)
                if (encL.get_position() - bump_move_start) >= 11:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 4
                    bump_move_start = encL.get_position()
            elif bump_state == 4:
                # Rotate to heading -90°
                target_heading = -90
                error = imu.compute_heading_error(target_heading)
                if abs(error) <= heading_threshold:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 5
                    bump_move_start = encL.get_position()
                else:
                    if error < 0:
                        mot_L.set_effort(turning_pwm)
                        mot_R.set_effort(-turning_pwm)
                    else:
                        mot_L.set_effort(-turning_pwm)
                        mot_R.set_effort(turning_pwm)
            elif bump_state == 5:
                # Drive forward for 5.5 Left Encoder radians at heading -90°
                target_heading = -90
                error = imu.compute_heading_error(target_heading)
                correction = kp * error
                mot_R.set_effort(fwd_pwm + correction)
                mot_L.set_effort(fwd_pwm - correction)
                if (encL.get_position() - bump_move_start) >= 5.5:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 6
                    bump_move_start = encL.get_position()
            elif bump_state == 6:
                # Rotate to heading 180°
                target_heading = 180
                error = imu.compute_heading_error(target_heading)
                if abs(error) <= heading_threshold:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 7
                    bump_move_start = encL.get_position()
                else:
                    if error < 0:
                        mot_L.set_effort(turning_pwm)
                        mot_R.set_effort(-turning_pwm)
                    else:
                        mot_L.set_effort(-turning_pwm)
                        mot_R.set_effort(turning_pwm)
            elif bump_state == 7:
                # Drive forward for 12 Left Encoder radians at heading 180°
                target_heading = 180
                error = imu.compute_heading_error(target_heading)
                correction = kp * error
                mot_R.set_effort(fwd_pwm + correction)
                mot_L.set_effort(fwd_pwm - correction)
                if (encL.get_position() - bump_move_start) >= 12:
                    mot_R.set_effort(0)
                    mot_L.set_effort(0)
                    bump_state = 8
            elif bump_state == 8:
                print("Bump Sequence complete. Stopping.")
                mot_R.set_effort(0)
                mot_L.set_effort(0)
                system_done.put(1) #Signal the end of the sequence.
                state = 99  # Final state: stop DR after bump sequence.
        yield 0



# =============================================================================
# Main Code
# =============================================================================

gc.collect() # Run Garbage collection to free memory

# Create task objects for each task, specifying periods and priorities 
# as well as shared variables.

task1_obj = cotask.Task(User_Interaction_Task,
                        name="User Interaction",
                        priority=5,
                        period=500,
                        profile=False,
                        shares=(system_done, calibration))

task2_obj = cotask.Task(Actuation_Task,
                        name="Actuation",
                        priority=3,
                        period=12,
                        profile=False,
                        shares=(system_done, R_pwm_effort, L_pwm_effort, calibration, dr_mode))

task3_obj = cotask.Task(IR_Task,
                        name="IR",
                        priority=1,
                        period=8,
                        profile=False,
                        shares=(system_done, calibration, centroid))

task4_obj = cotask.Task(Controller_Task,
                        name="Controller",
                        priority=4,
                        period=12,
                        profile=False,
                        shares=(system_done, calibration, R_pwm_effort, L_pwm_effort, centroid, romi_heading))

task5_obj = cotask.Task(DeadReckoning_Task,
                        name="Dead Reckoning",
                        priority=2,
                        period=15,
                        profile=False,
                        shares=(system_done, calibration, dr_mode))

# Append tasks to the scheduler.
cotask.task_list.append(task1_obj)
cotask.task_list.append(task2_obj)
cotask.task_list.append(task3_obj)
cotask.task_list.append(task4_obj)
cotask.task_list.append(task5_obj)

# Main loop: run the scheduler until system_done is set to one.
try:
    while True:
        cotask.task_list.pri_sched()
except KeyboardInterrupt:
    system_done.put(1)
    print("KeyboardInterrupt: Setting system_done. Exiting main loop.")
except Exception as e:
    system_done.put(1)
    print("Exception occurred: Setting system_done. Raising exception.")
    raise

print("System has completed data collection and printing. Exiting.")
